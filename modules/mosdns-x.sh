#!/usr/bin/env bash
set -euo pipefail

REPO="pmkol/mosdns-x"
BIN="/usr/local/bin/mosdns"
WORKDIR="/etc/mosdns"
CONF="${WORKDIR}/config.yaml"
TMPDIR="$(mktemp -d)"
PURGE="0"

require_root() {
  if [ "$(id -u)" -ne 0 ]; then
    echo "请用 root 运行。" >&2
    exit 1
  fi
}

log()  { echo -e "\033[1;32m[+] $*\033[0m"; }
warn() { echo -e "\033[1;33m[!] $*\033[0m"; }
err()  { echo -e "\033[1;31m[-] $*\033[0m" >&2; }

detect_pkg() {
  if command -v apt-get >/dev/null 2>&1; then echo "apt"; return; fi
  if command -v dnf >/dev/null 2>&1; then echo "dnf"; return; fi
  if command -v yum >/dev/null 2>&1; then echo "yum"; return; fi
  if command -v apk >/dev/null 2>&1; then echo "apk"; return; fi
  echo "unknown"
}

ensure_deps() {
  local miss=()
  for c in curl unzip tar sed grep awk; do
    command -v "$c" >/dev/null 2>&1 || miss+=("$c")
  done
  if [ "${#miss[@]}" -gt 0 ]; then
    local mgr; mgr=$(detect_pkg)
    case "$mgr" in
      apt)  log "安装依赖：${miss[*]}"; apt-get update -y && apt-get install -y "${miss[@]}";;
      dnf)  log "安装依赖：${miss[*]}"; dnf install -y "${miss[@]}";;
      yum)  log "安装依赖：${miss[*]}"; yum install -y "${miss[@]}";;
      apk)  log "安装依赖：${miss[*]}"; apk add --no-cache "${miss[@]}";;
      *)    warn "无法自动安装依赖，请手动安装：${miss[*]}";;
    esac
  fi
}

# 归一化架构
normalize_arch() {
  local u; u="$(uname -m)"
  case "$u" in
    x86_64|amd64)      echo "linux-amd64";;
    i386|i686)         echo "linux-amd64-v3";; # 没有32位包，尝试 v3
    aarch64|arm64)     echo "linux-arm64";;
    armv7l|armv7)      echo "linux-arm-7";;
    armv6l|armv6)      echo "linux-arm-6";;
    armv5l|armv5)      echo "linux-arm-5";;
    mips64le)          echo "linux-mips64le-hardfloat";;
    *)                 err "未支持的架构：$u"; exit 2;;
  esac
}

# 获取最新 release 对应资产下载链接
latest_asset_url() {
  local arch="$1"
  local api="https://api.github.com/repos/${REPO}/releases/latest"
  # 直接用 grep/sed 提取目标资产链接
  local url
  url="$(curl -fsSL "$api" \
      | grep -oE "\"browser_download_url\": *\"[^\"]+mosdns-${arch}\.zip\"" \
      | head -n1 | sed -E 's/.*"browser_download_url": *"([^"]+)".*/\1/')"
  if [ -z "$url" ]; then
    err "未在最新 Release 中找到架构 ${arch} 的资产。"; exit 3
  fi
  echo "$url"
}

install_bin() {
  require_root
  ensure_deps
  mkdir -p "$WORKDIR"

  local arch; arch="$(normalize_arch)"
  local url;  url="$(latest_asset_url "$arch")"
  log "下载 ${url}"
  local z="${TMPDIR}/mosdns.zip"
  curl -fSL "$url" -o "$z"

  log "解压到临时目录"
  unzip -o "$z" -d "$TMPDIR" >/dev/null

  # 资产内通常直接包含可执行文件名为 mosdns
  if [ ! -f "${TMPDIR}/mosdns" ]; then
    # 有的包可能解压到子目录
    local f
    f="$(find "$TMPDIR" -maxdepth 2 -type f -name mosdns | head -n1 || true)"
    [ -n "$f" ] || { err "解压包内未找到 mosdns"; exit 4; }
    mv "$f" "${TMPDIR}/mosdns"
  fi

  log "安装到 ${BIN}"
  install -m 0755 "${TMPDIR}/mosdns" "$BIN"

  if [ ! -f "$CONF" ]; then
    log "生成基础配置 ${CONF}"
    cat >"$CONF" <<'YAML'
# Minimal working config generated by installer
plugins:
  - tag: fwd
    type: fast_forward
    args:
      upstreams:
        - addr: 1.1.1.1
          enable_pipeline: true
        - addr: 1.0.0.1
          enable_pipeline: true
servers:
  - exec: fwd
    listeners:
      - protocol: udp
        addr: 0.0.0.0:53
      - protocol: tcp
        addr: 0.0.0.0:53
YAML
    # 注：更复杂的配置请参考 Wiki「配置说明」页面。
  else
    log "保留已存在的配置：${CONF}"
  fi

  # 使用 mosdns 自带的服务管理器（Wiki 推荐）
  log "安装为系统服务"
  # 先尝试卸载旧服务（忽略错误）
  set +e
  "$BIN" service stop >/dev/null 2>&1
  "$BIN" service uninstall >/dev/null 2>&1
  set -e

  "$BIN" service install -d "$WORKDIR" -c "$CONF"
  "$BIN" service start

  log "安装完成。版本：$("$BIN" version || true)"
  log "工作目录：$WORKDIR"
}

uninstall_bin() {
  require_root
  if command -v mosdns >/dev/null 2>&1; then
    log "停止并卸载系统服务"
    set +e
    mosdns service stop >/dev/null 2>&1
    mosdns service uninstall >/dev/null 2>&1
    set -e
  fi

  if [ -f "$BIN" ]; then
    log "删除可执行文件 ${BIN}"
    rm -f "$BIN"
  fi

  if [ "$PURGE" = "1" ]; then
    log "清理工作目录 ${WORKDIR}"
    rm -rf "$WORKDIR"
  else
    log "已保留配置与数据：${WORKDIR}（如需彻底删除，加 --purge）"
  fi
}

reinstall_bin() {
  require_root
  log "重装 mosdns-x（保留配置 ${CONF}）"
  # 不加 --purge，确保保留配置
  uninstall_bin
  install_bin
}

usage() {
  cat <<USAGE
用法：$0 {install|uninstall|reinstall} [--purge]
  install     安装并注册为系统服务（默认生成最小可用配置，如已存在则保留）
  uninstall   卸载二进制与服务（默认保留 ${WORKDIR}，如需删除请加 --purge）
  reinstall   重装最新版本，保留配置
示例：
  sudo $0 install
  sudo $0 uninstall
  sudo $0 uninstall --purge
  sudo $0 reinstall
USAGE
}

main() {
  local action="${1:-}"
  shift || true
  while [ "${1:-}" != "" ]; do
    case "$1" in
      --purge) PURGE="1";;
      *) usage; exit 1;;
    esac
    shift || true
  done

  case "$action" in
    install)   install_bin;;
    uninstall) uninstall_bin;;
    reinstall) reinstall_bin;;
    *)         usage; exit 1;;
  esac
}

trap 'rm -rf "$TMPDIR"' EXIT
main "$@"
