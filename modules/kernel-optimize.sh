#!/bin/bash
# Debian 12/13 内核参数优化脚本

set -euo pipefail
umask 022

readonly LIMITS_DROPIN="/etc/security/limits.d/99-kernel-optimize.conf"
readonly SYSCTL_DROPIN="/etc/sysctl.d/99-kernel-optimize.conf"
readonly SUPPORTED_DEBIAN_MAJOR_VERSIONS=("12" "13")
readonly SUPPORTED_DEBIAN_CODENAMES=("bookworm" "trixie")

DEBIAN_ID=""
DEBIAN_MAJOR_VERSION=""
DEBIAN_CODENAME=""

log() {
    local msg="$1" level="${2:-info}"
    local color
    case "$level" in
        info)    color="\033[0;36m" ;;
        warn)    color="\033[0;33m" ;;
        error)   color="\033[0;31m" ;;
        success) color="\033[0;32m" ;;
        *)       color="\033[0m" ;;
    esac
    echo -e "${color}[$(date '+%H:%M:%S')] $msg\033[0m" >&2
}

ensure_root() {
    if (( EUID != 0 )); then
        log "此脚本需要以 root 权限运行。" "error"
        exit 1
    fi
}

detect_debian_release() {
    if [[ -r /etc/os-release ]]; then
        # shellcheck disable=SC1091
        . /etc/os-release
        DEBIAN_ID="${ID:-}"
        DEBIAN_CODENAME="${VERSION_CODENAME:-}"
        DEBIAN_MAJOR_VERSION="${VERSION_ID%%.*}"
    fi

    local id_like="${ID_LIKE:-}"
    if [[ "${DEBIAN_ID}" != "debian" && "${id_like}" != *debian* ]]; then
        log "检测到的系统并非 Debian 系，脚本仅在 Debian 12/13 上验证。" "warn"
    fi

    if [[ -z "$DEBIAN_MAJOR_VERSION" && -n "$DEBIAN_CODENAME" ]]; then
        case "$DEBIAN_CODENAME" in
            bookworm) DEBIAN_MAJOR_VERSION="12" ;;
            trixie)   DEBIAN_MAJOR_VERSION="13" ;;
        esac
    fi

    local supported=0 version codename
    if [[ -n "$DEBIAN_MAJOR_VERSION" ]]; then
        for version in "${SUPPORTED_DEBIAN_MAJOR_VERSIONS[@]}"; do
            if [[ "$version" == "$DEBIAN_MAJOR_VERSION" ]]; then
                supported=1
                break
            fi
        done
    fi

    if (( !supported )) && [[ -n "$DEBIAN_CODENAME" ]]; then
        for codename in "${SUPPORTED_DEBIAN_CODENAMES[@]}"; do
            if [[ "$codename" == "$DEBIAN_CODENAME" ]]; then
                supported=1
                break
            fi
        done
    fi

    if (( supported )); then
        log "检测到 Debian ${DEBIAN_MAJOR_VERSION:-unknown}${DEBIAN_CODENAME:+ (${DEBIAN_CODENAME})}。" "info"
    else
        log "当前系统版本 ${DEBIAN_MAJOR_VERSION:-unknown}${DEBIAN_CODENAME:+ (${DEBIAN_CODENAME})} 未列入官方支持范围，继续执行请谨慎。" "warn"
    fi
}

ensure_pam_limits() {
    if [[ -f /etc/pam.d/common-session ]] && ! grep -q "pam_limits.so" /etc/pam.d/common-session; then
        echo "session required pam_limits.so" >> /etc/pam.d/common-session
        log "已在 /etc/pam.d/common-session 中启用 pam_limits。" "info"
    fi

    if [[ -f /etc/pam.d/common-session-noninteractive ]] && ! grep -q "pam_limits.so" /etc/pam.d/common-session-noninteractive; then
        echo "session required pam_limits.so" >> /etc/pam.d/common-session-noninteractive
        log "已在 /etc/pam.d/common-session-noninteractive 中启用 pam_limits。" "info"
    fi
}

configure_limits() {
    log "写入自定义资源限制..."
    cat > "$LIMITS_DROPIN" <<'EOF'
# Generated by winter kernel optimize module
*     soft   nofile    1048576
*     hard   nofile    1048576
*     soft   nproc     1048576
*     hard   nproc     1048576
*     soft   core      1048576
*     hard   core      1048576
*     soft   memlock   unlimited
*     hard   memlock   unlimited

root  soft   nofile    1048576
root  hard   nofile    1048576
root  soft   nproc     1048576
root  hard   nproc     1048576
root  soft   core      1048576
root  hard   core      1048576
root  soft   memlock   unlimited
root  hard   memlock   unlimited
EOF
    log "资源限制已写入 $LIMITS_DROPIN" "success"
}

write_sysctl_base() {
    log "写入内核调优配置..."
    cat > "$SYSCTL_DROPIN" <<'EOF'
# Generated by winter kernel optimize module
fs.file-max = 1048576
fs.inotify.max_user_instances = 8192
net.core.somaxconn = 32768
net.core.netdev_max_backlog = 32768
net.core.rmem_max = 33554432
net.core.wmem_max = 33554432
net.ipv4.udp_rmem_min = 16384
net.ipv4.udp_wmem_min = 16384
net.ipv4.tcp_rmem = 4096 87380 33554432
net.ipv4.tcp_wmem = 4096 16384 33554432
net.ipv4.tcp_mem = 786432 1048576 26777216
net.ipv4.udp_mem = 65536 131072 262144
net.ipv4.tcp_syncookies = 1
net.ipv4.tcp_fin_timeout = 30
net.ipv4.tcp_tw_reuse = 1
net.ipv4.ip_local_port_range = 1024 65000
net.ipv4.tcp_max_syn_backlog = 16384
net.ipv4.tcp_max_tw_buckets = 6000
net.ipv4.route.gc_timeout = 100
net.ipv4.tcp_syn_retries = 1
net.ipv4.tcp_synack_retries = 1
net.ipv4.tcp_timestamps = 0
net.ipv4.tcp_max_orphans = 131072
net.ipv4.tcp_no_metrics_save = 1
net.ipv4.tcp_ecn = 0
net.ipv4.tcp_frto = 0
net.ipv4.tcp_mtu_probing = 0
net.ipv4.tcp_rfc1337 = 0
net.ipv4.tcp_sack = 1
net.ipv4.tcp_fack = 1
net.ipv4.tcp_window_scaling = 1
net.ipv4.tcp_adv_win_scale = 1
net.ipv4.tcp_moderate_rcvbuf = 1
net.ipv4.tcp_keepalive_time = 600
net.ipv4.tcp_notsent_lowat = 16384
net.ipv4.conf.all.route_localnet = 1
net.ipv4.ip_forward = 1
net.ipv4.conf.all.forwarding = 1
net.ipv4.conf.default.forwarding = 1
EOF
    log "内核参数已写入 $SYSCTL_DROPIN" "success"
}

enable_bbr() {
    if modprobe tcp_bbr >/dev/null 2>&1; then
        if grep -qw bbr /proc/sys/net/ipv4/tcp_available_congestion_control 2>/dev/null; then
            cat >> "$SYSCTL_DROPIN" <<'EOF'
net.core.default_qdisc = fq
net.ipv4.tcp_congestion_control = bbr
EOF
            log "检测到 BBR 支持，已启用 fq + bbr。" "success"
        else
            log "系统内核未列出 BBR 拥塞控制，保持现有设置。" "warn"
        fi
    else
        log "无法加载 tcp_bbr 模块，跳过 BBR 设置。" "warn"
    fi
}

apply_sysctl_settings() {
    log "应用内核配置..."
    if sysctl -p "$SYSCTL_DROPIN" >/dev/null; then
        log "内核参数已重新加载。" "success"
    else
        log "sysctl 重新加载失败，请检查配置文件。" "error"
        exit 1
    fi
}

show_summary() {
    echo
    log "---------- 内核优化结果 ----------"
    if [[ -f "$LIMITS_DROPIN" ]]; then
        echo -e "  \033[0;32m✓\033[0m 资源限制配置: $LIMITS_DROPIN"
    else
        echo -e "  \033[0;31m✗\033[0m 资源限制配置未找到"
    fi

    if [[ -f "$SYSCTL_DROPIN" ]]; then
        echo -e "  \033[0;32m✓\033[0m sysctl 配置: $SYSCTL_DROPIN"
    else
        echo -e "  \033[0;31m✗\033[0m sysctl 配置未找到"
    fi

    local cc
    cc=$(sysctl -n net.ipv4.tcp_congestion_control 2>/dev/null || echo "unknown")
    echo "  当前拥塞控制算法: $cc"

    echo
    log "如需回退，可删除上述配置文件并运行 'sysctl --system'。" "info"
}

main() {
    trap 'log "脚本执行中发生错误，请检查输出。" "error"' ERR
    ensure_root
    detect_debian_release
    ensure_pam_limits
    configure_limits
    write_sysctl_base
    enable_bbr
    apply_sysctl_settings
    show_summary
}

main "$@"
